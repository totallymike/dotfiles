#+TITLE:  Emacs Configuration File
#+AUTHOR: Michael Westbom
#+EMAIL: michael@westbom.co

* Introduction

  This is the entrypoint of my =.emacs= file.  It's written in a
  [[http://www.orgmode.org][literate style]], as ganked from [[https://github.com/howardabrams/dot-files][Howard Abrams]].  The notes also
  include hyperlinks from where /he/ stole it from :-)

** Emacs Executable

   Currently I'm using [[https://github.com/d12frosted/homebrew-emacs-plus][Emacs Plus]] as my preferred Emacs build.  They
   can tell you how it's built better than I can.

* General Settings
** Directory location

   Utility functions for pathmaking funtimess

   #+BEGIN_SRC emacs-lisp
     (defun mw/emacs-subdirectory (d) (expand-file-name d user-emacs-directory))
   #+END_SRC

** Directory Structure

   In case this is the first time running this on a computer, we need
   to make sure the following directories have been created.

   #+BEGIN_SRC emacs-lisp
     (let* ((subdirs '("elisp" "backups"))
            (fulldirs (mapcar (lambda (d) (mw/emacs-subdirectory d)) subdirs)))
       (dolist (dir fulldirs)
         (when (not (file-exists-p dir))
           (message "Make directory: %s" dir)
           (make-directory dir))))
   #+END_SRC

** Backup files

   Such a mess!

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                      (mw/emacs-subdirectory "backups")))))
   #+END_SRC

** Customization Section

   Customize is pretty neat sometimes, so let's stick it in a place.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** Setting up the load path

   Extra packages not available via the package manager go in
   a stash at =$HOME/.emacs.d/elisp=

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (mw/emacs-subdirectory "elisp"))
   #+END_SRC

** Modernizing Emacs

   We've tons of RAM, let's use it :)

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC

* Package Initialization
** Package Manager

   Emacs package management sources

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (setq package-archives '(("org" . "http://orgmode.org/elpa/")
                              ("gnu" . "http://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")))
     (package-initialize)
     (package-refresh-contents)
   #+END_SRC

** Use-package

   Using [[https://github.com/jwiegley/use-package][use-package]] to automatically install certain packages, as
   well as lazy-load them.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

** Init File Support

   Load up my collection of enhancements to Emacs Lisp, including [[https://github.com/magnars/dash.el][dash]]
   and [[https://github.com/magnars/s.el][s]] for string manipulation, as much of the initialization code
   depends on it.

   #+BEGIN_SRC emacs-lisp
     (require 'cl)

     (use-package dash
       :ensure t
       :config (eval-after-load "dash" '(dash-enable-font-lock)))

     (use-package s
       :ensure t)
   #+END_SRC

** Macros I stole from spacemacs
*** add-company-hook

    [[https://github.com/syl20bnr/spacemacs/blob/c788da709bb1c74344f5ab1b6f18cfdf6b930df8/core/core-auto-completion.el#L29][From here]]

    #+BEGIN_SRC emacs-lisp
      (defvar mw-default-company-backends
        '((company-dabbrev-code company-keywords)
          company-files company-dabbrev)
        "The list of default company backends used by this config.")

      (defmacro mw|defvar-company-backends (mode)
        "Define a MODE specific company backend variable with default backends.
      The variable name format is company-backends-MODE."
        `(defvar ,(intern (format "company-backends-%S" mode))
           ',mw-default-company-backends
           ,(format "Company backend list for %S" mode)))

      (defmacro mw|add-company-hook (mode)
        "Enable company for the given MODE.
      MODE must match the symbol passed in `mw|defvar-company-backends'.
      The initialization function is hooked to `MODE-hook'."
        (let ((mode-hook (intern (format "%S-hook" mode)))
              (func (intern (format "mw//init-company-%S" mode)))
              (backend-list (intern (format "company-backends-%S" mode))))
          `(progn
             (defun ,func ()
               ,(format "Initialize company for %S" mode)
               (set (make-variable-buffer-local 'auto-completion-front-end)
                    'company)
               (set (make-variable-buffer-local 'company-backends)
                    ,backend-list))
             (add-hook ',mode-hook ',func t)
             (add-hook ',mode-hook 'company-mode t))))
    #+END_SRC

* Variables

  General settings about me that other packages can use.

  #+BEGIN_SRC emacs-lisp
    (setq user-mail-address "michael.westbom@maxwellhealth.com")
  #+END_SRC

** Tabs vs Spaces

   Tabs are bad news.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 2)
   #+END_SRC

   Make tab key do indent first, then completion.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-always-indent 'complete)
   #+END_SRC

** Misc. Variable Settings

   So over typing =yes=
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

* Display Settings

  Cut out some junk

  #+BEGIN_SRC emacs-lisp
    (setq initial-scratch-message "")
    (setq visible-bell t)

    (when (window-system)
      (tool-bar-mode -1)
      (when (fboundp 'horizontal-scroll-bar-mode)
        (horizontal-scroll-bar-mode -1))
      (scroll-bar-mode -1))
  #+END_SRC

** Whitespace mode

   I love whitespace mode. Gank some stuff from [[https://github.com/syl20bnr/spacemacs][spacemacs]]

   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :defer t
       :init
       (progn
         (setq whitespace-style '(face
                                  tabs
                                  tab-mark
                                  trailing
                                  indentation::tab))
         (setq mw-show-trailing-whitespace t)
         (defun mw//show-trailing-whitespace ()
           (when mw-show-trailing-whitespace
             (whitespace-mode)
             (set-face-attribute 'trailing-whitespace nil
                                 :background
                                 (face-attribute 'font-lock-comment-face
                                                 :foreground))
             (setq show-trailing-whitespace 1)))
         (add-hook 'prog-mode-hook 'mw//show-trailing-whitespace)

         (defun mw//set-whitespace-style-for-diff ()
           "Whitespace configuration for `diff-mode'"
           (setq-local whitespace-style '(face
                                          tabs
                                          tab-mark
                                          spaces
                                          space-mark
                                          trailing
                                          indentation::space
                                          indentation::tab
                                          newline)))
         (add-hook 'diff-mode-hook 'whitespace-mode)
         (add-hook 'diff-mode-hook 'mw//set-whitespace-style-for-diff))
       :config
       (progn
         (set-face-attribute 'whitespace-indentation nil
                             :background nil
                             :foreground nil)
         (set-face-attribute 'whitespace-tab nil
                             :background nil)))
   #+END_SRC

* Key Bindings

** Displaying Command Sequences

   Many command sequences may be logical, but who can remember them all?

   Let's use [[https://github.com/justbur/emacs-which-key][which-key]] to display them as I type

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :defer 10
       :diminish which-key-mode
       :config
       (which-key-add-key-based-replacements
        "C-x 8" "unicode"
        "C-c T" "toggles-"
        "C-c C-v" "org-babel")
       (which-key-mode 1))
   #+END_SRC
* Word Smithing
** Auto Complete

   [[http://company-mode.github.io][company-mode]] is the bee's knees

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (setq company-dabbrev-ignore-case t
             company-show-numbers t)
       (add-hook 'after-init-hook 'global-company-mode)
       :diminish company-mode)
   #+END_SRC

* Miscellaneous Settings

** Line Numbers

   Turn =linum-mode= on for programming modes

   #+BEGIN_SRC emacs-lisp
     (use-package linum
       :init
       (add-hook 'prog-mode-hook 'linum-mode))
   #+END_SRC

** Flycheck

   Because of linting

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-flycheck-mode)
       :config
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
   #+END_SRC

   Also add mechanism for adding flycheck hooks.  Stolen [[https://github.com/syl20bnr/spacemacs/blob/c788da709bb1c74344f5ab1b6f18cfdf6b930df8/layers/%252Bcheckers/syntax-checking/funcs.el#L12-L18][from here]]

   #+BEGIN_SRC emacs-lisp
     (defun mw/add-flycheck-hook (mode)
       "Use flycheck in MODE by default."
       (when (and (listp flycheck-global-modes)
                  (not (eq 'not (car flycheck-global-modes))))
         (push mode flycheck-global-modes)))
   #+END_SRC

** Strip Whitespace on Save

   When I save, I want to /always/ strip trailing whitespace

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

* General Behavior fixes

  Some crap's going to go here eventually.

* Undo and Redo

  undo-tree is the bomb

  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :diminish undo-tree-mode
      :init
      (global-undo-tree-mode 1)
      :config
      (defalias 'redo 'undo-tree-redo))
  #+END_SRC

* Multiple Cursors

  I always forget to install this when I manually emacs

  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :commands (mc/mark-next-like-this
                 mc/mark-previous-like-this
                 mc/mark-all-like-this
                 mc/edit-lines)
      :bind (("C->" . mc/mark-next-like-this)
             ("C-<" . mc/mark-previous-like-this)
             ("C-c C-<" . mc/mark-all-like-this)
             ("C-S-c C-S-c" . mc/edit-lines)))
  #+END_SRC

* Loading and Finding Files

** Helm

   I like Helm. It's powerful and it matches well.

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :diminish (helm-mode)
       :bind (("M-x" . helm-M-x)
              ("C-x C-f" . helm-find-files))
       :config (helm-mode 1))
   #+END_SRC

   Let's also add helm-ag because it's so nice

   #+BEGIN_SRC emacs-lisp
     (use-package helm-ag
       :ensure t)
   #+END_SRC
** Projectile

   Projectile is rad and very good.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :init (projectile-global-mode 1)
       :config
       (add-to-list 'projectile-globally-ignored-files ".DS_Store")
       :bind (("C-c p s s" . projecile-ag)
              ("C-c p p" . projectile-switch-project)))
   #+END_SRC

** Helm-projectile

   Now let's put Helm and Projectile together!

   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t
       :config
       (helm-projectile-on))
   #+END_SRC

* Programming
** Web

   This is all set up in [[file:emacs-web.org][emacs-web.org]]

   #+BEGIN_SRC emacs-lisp
     (require 'init-web)
   #+END_SRC

** Javascript

   See [[file:emacs-javascript.org][emacs-javascript.org]] for this business

   #+BEGIN_SRC emacs-lisp
     (require 'init-javascript)
   #+END_SRC

** Typescript

   This is all set up in [[file:emacs-typescript.org][emacs-typescript.org]]

   #+BEGIN_SRC emacs-lisp
     (require 'init-typescript)
   #+END_SRC

** Rust

   Rust is fantastic. Let's load it from [[file:emacs-rust.org][emacs-rust.org]]

   #+BEGIN_SRC emacs-lisp
     (require 'init-rust)
   #+END_SRC

* Magit

  Omg I love this so much

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :commands magit-status magit-blame
      :init (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
      :bind ("C-x g" . magit-status))
  #+END_SRC

* Org-Mode

  See [[file:emacs-org.org][emacs-org-mode.el]] for my details on my [[http://www.orgmode.org][Org-Mode]] settings.

** Load up the Local Configuration

   Before we finish, we need to check if there is a local file for us
   to load and evaluate.  We assume the local file has been tangled
   and provides the =init-local= key:

   #+BEGIN_SRC emacs-lisp
     (require 'init-local nil t)
   #+END_SRC

* Technical junk

** Configure the Graphical Settings

   If we're running in a windowed environment, there's stuff to be
   done

   #+BEGIN_SRC emacs-lisp
     (if (window-system)
         (require 'init-client)
       (require 'init-server))
   #+END_SRC

** Last little bits

   After the first load, we can reload this with a require:

   #+BEGIN_SRC emacs-lisp
     (provide 'init-main)
   #+END_SRC

   Before you can build this on a new system, make sure that you put
   the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args :results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    header-args:emacs-lisp :tangle ~/.emacs.d/elisp/init-main.el
#+PROPERTY:    header-args :eval no-export
#+PROPERTY:    header-args :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
