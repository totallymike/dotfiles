#+TITLE:  Emacs Configuration File for Web
#+AUTHOR: Michael Westbom
#+EMAIL: michael@westbom.co

* Web Mode


  Set up the =company-backends-web-mode= variable.

  #+BEGIN_SRC emacs-lisp
    (mw|defvar-company-backends web-mode)
  #+END_SRC

  Use [[http://web-mode.org/][web-mode]] because it's awesome.

  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :defer t
      :init
      (push '(company-web-html company-css) company-backends-web-mode)
      :mode (("\\.html\\'" . web-mode)
             ("\\.htm\\'" . web-mode)))
    #+END_SRC

* React

  Set up some necessary stuff to make react work nicely with
  Javascript and Typescript.

  #+BEGIN_SRC emacs-lisp
    (mw|defvar-company-backends react-mode)

    (use-package web-mode
      :config
      (progn
        (define-derived-mode react-mode web-mode "react")
        (mw|add-company-hook react-mode)
        (add-to-list 'auto-mode-alist '("\\.jsx\\'" . react-mode))
        (add-to-list 'auto-mode-alist '("\\.react.js\\'" . react-mode))
        (add-to-list 'magic-mode-alist '("/\\*\\* @jsx React.DOM \\*/" . react-mode))
        (add-to-list 'magic-mode-alist '("^import React" . react-mode))
        (defun mw//setup-react-mode ()
          "Adjust web-mode to accommodate react-mode"
          (web-mode-set-content-type "jsx")
          (setq-local web-mode-enable-auto-quoting nil))
        (add-hook 'react-mode-hook 'mw//setup-react-mode)
        (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
        (add-hook 'web-mode-hook
                  (lambda ()
                    (when (and (buffer-file-name)
                               (string-equal "tsx" (file-name-extension (buffer-file-name))))
                      (tide-setup)
                      (flycheck-mode +1)
                      (eldoc-mode +1)
                      (company-mode-on))))))
  #+END_SRC

  Add flycheck-related config for this new react-mode

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :config
      (progn
        (flycheck-add-mode 'javascript-eslint 'react-mode)
        (defun react/use-eslint-from-node-modules ()
          (let* ((root (locate-dominating-file
                        (or (buffer-file-name) default-directory)
                        "node_modules"))
                 (global-eslint (executable-find "eslint"))
                 (local-eslint (expand-file-name "node_modules/.bin/eslint"
                                                 root))
                 (eslint (if (file-executable-p local-eslint)
                             local-eslint
                           global-eslint)))
            (setq-local flycheck-javascript-eslint-executable eslint)))))
  #+END_SRC

* Technical Junk

  After the first load, we can reload this with a require:

  #+BEGIN_SRC emacs-lisp
    (provide 'init-web)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs web-mode config, loaded by the .emacs file.
#+PROPERTY:    header-args :results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    header-args:emacs-lisp :tangle ~/.emacs.d/elisp/init-web.el
#+PROPERTY:    header-args :eval no-export
#+PROPERTY:    header-args :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
